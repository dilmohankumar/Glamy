{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Desktop/glamy/frontend/src/pages/glamyai.js\",\n  _s = $RefreshSig$();\nimport \"./glamyai.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst questionsList = [{\n  question: \"What is your name?\",\n  answer: \"I am GlamyAI, your chatbot assistant.\"\n}, {\n  question: \"How can I contact support?\",\n  answer: \"You can contact support at support@example.com.\"\n}, {\n  question: \"What services do you provide?\",\n  answer: \"I provide AI-based chatbot solutions and support.\"\n}, {\n  question: \"Where are you located?\",\n  answer: \"I exist in the digital world!\"\n}];\nconst BotChat = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    text: \"Hello! Click on a question below or type your own query.\",\n    sender: \"bot\"\n  }]);\n  const [input, setInput] = useState(\"\");\n  const messagesEndRef = useRef(null);\n  const sendMessage = userInput => {\n    if (!userInput.trim()) return;\n\n    // User ka message show kare\n    const userMessage = {\n      text: userInput,\n      sender: \"user\"\n    };\n    setMessages(prev => [...prev, userMessage]);\n\n    // Check if question exists in predefined list\n    const foundQuestion = questionsList.find(q => q.question.toLowerCase() === userInput.toLowerCase());\n    const botReplyText = foundQuestion ? foundQuestion.answer : \"I'm not sure about that. Can you rephrase?\";\n    setTimeout(() => {\n      const botReply = {\n        text: botReplyText,\n        sender: \"bot\"\n      };\n      setMessages(prev => [...prev, botReply]);\n    }, 1000);\n  };\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"questions\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Common Questions:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), questionsList.map((q, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendMessage(q.question),\n        className: \"question-btn\",\n        children: q.question\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(motion.div, {\n        initial: {\n          opacity: 0,\n          x: msg.sender === \"user\" ? 50 : -50\n        },\n        animate: {\n          opacity: 1,\n          x: 0\n        },\n        transition: {\n          duration: 0.3\n        },\n        className: `message ${msg.sender}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyDown: e => e.key === \"Enter\" && sendMessage(input),\n        placeholder: \"Type a message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendMessage(input),\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(BotChat, \"nS7ou5DEgHqZ10D6YSJ6ESCpegs=\");\n_c = BotChat;\nexport default BotChat;\nvar _c;\n$RefreshReg$(_c, \"BotChat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","motion","jsxDEV","_jsxDEV","questionsList","question","answer","BotChat","_s","messages","setMessages","text","sender","input","setInput","messagesEndRef","sendMessage","userInput","trim","userMessage","prev","foundQuestion","find","q","toLowerCase","botReplyText","setTimeout","botReply","_messagesEndRef$curre","current","scrollIntoView","behavior","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","msg","div","initial","opacity","x","animate","transition","duration","ref","type","value","onChange","e","target","onKeyDown","key","placeholder","_c","$RefreshReg$"],"sources":["/Users/macbookpro/Desktop/glamy/frontend/src/pages/glamyai.js"],"sourcesContent":["import \"./glamyai.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { motion } from \"framer-motion\";\n\nconst questionsList = [\n  { question: \"What is your name?\", answer: \"I am GlamyAI, your chatbot assistant.\" },\n  { question: \"How can I contact support?\", answer: \"You can contact support at support@example.com.\" },\n  { question: \"What services do you provide?\", answer: \"I provide AI-based chatbot solutions and support.\" },\n  { question: \"Where are you located?\", answer: \"I exist in the digital world!\" },\n];\n\nconst BotChat = () => {\n  const [messages, setMessages] = useState([\n    { text: \"Hello! Click on a question below or type your own query.\", sender: \"bot\" },\n  ]);\n  const [input, setInput] = useState(\"\");\n  const messagesEndRef = useRef(null);\n\n  const sendMessage = (userInput) => {\n    if (!userInput.trim()) return;\n\n    // User ka message show kare\n    const userMessage = { text: userInput, sender: \"user\" };\n    setMessages((prev) => [...prev, userMessage]);\n\n    // Check if question exists in predefined list\n    const foundQuestion = questionsList.find(q => q.question.toLowerCase() === userInput.toLowerCase());\n    const botReplyText = foundQuestion ? foundQuestion.answer : \"I'm not sure about that. Can you rephrase?\";\n\n    setTimeout(() => {\n      const botReply = { text: botReplyText, sender: \"bot\" };\n      setMessages((prev) => [...prev, botReply]);\n    }, 1000);\n  };\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"questions\">\n        <h3>Common Questions:</h3>\n        {questionsList.map((q, index) => (\n          <button key={index} onClick={() => sendMessage(q.question)} className=\"question-btn\">\n            {q.question}\n          </button>\n        ))}\n      </div>\n\n      <div className=\"messages\">\n        {messages.map((msg, index) => (\n          <motion.div\n            key={index}\n            initial={{ opacity: 0, x: msg.sender === \"user\" ? 50 : -50 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.3 }}\n            className={`message ${msg.sender}`}\n          >\n            {msg.text}\n          </motion.div>\n        ))}\n        <div ref={messagesEndRef} />\n      </div>\n\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onKeyDown={(e) => e.key === \"Enter\" && sendMessage(input)}\n          placeholder=\"Type a message...\"\n        />\n        <button onClick={() => sendMessage(input)}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default BotChat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}